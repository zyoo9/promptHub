// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Project {
  id             String   @id @default(uuid())
  name           String   @unique
  description    String?  @db.Text
  defaultBranch  String   @default("main") @map("default_branch")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  branches       Branch[]
  
  @@map("projects")
  @@index([name])
}

model Branch {
  id                  String   @id @default(uuid())
  name                String
  projectId           String   @map("project_id")
  isDefault           Boolean  @default(false) @map("is_default")
  lastCommitId        String?  @map("last_commit_id")
  createdFromCommitId String?  @map("created_from_commit_id")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  
  project             Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  lastCommit          Commit?  @relation("BranchLastCommit", fields: [lastCommitId], references: [id])
  createdFromCommit   Commit?  @relation("BranchCreatedFrom", fields: [createdFromCommitId], references: [id])
  commits             Commit[] @relation("BranchCommits")
  
  @@map("branches")
  @@unique([projectId, name], name: "unique_branch_per_project")
  @@index([projectId])
  @@index([lastCommitId])
}

model Commit {
  id             String   @id @default(uuid())
  message        String   @db.VarChar(500)
  content        String   @db.LongText
  branchId       String   @map("branch_id")
  parentCommitId String?  @map("parent_commit_id")
  commitHash     String   @unique @map("commit_hash") @db.VarChar(64)
  createdAt      DateTime @default(now()) @map("created_at")
  
  branch         Branch   @relation("BranchCommits", fields: [branchId], references: [id], onDelete: Cascade)
  parentCommit   Commit?  @relation("CommitParent", fields: [parentCommitId], references: [id])
  childCommits   Commit[] @relation("CommitParent")
  
  // 反向关系
  branchesLastCommit    Branch[] @relation("BranchLastCommit")
  branchesCreatedFrom   Branch[] @relation("BranchCreatedFrom")
  
  @@map("commits")
  @@index([branchId])
  @@index([commitHash])
  @@index([createdAt])
}
